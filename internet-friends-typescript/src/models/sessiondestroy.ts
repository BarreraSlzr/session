/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SessionDestroy = {
  /**
   * Success message
   */
  message: string;
};

/** @internal */
export const SessionDestroy$inboundSchema: z.ZodType<
  SessionDestroy,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type SessionDestroy$Outbound = {
  message: string;
};

/** @internal */
export const SessionDestroy$outboundSchema: z.ZodType<
  SessionDestroy$Outbound,
  z.ZodTypeDef,
  SessionDestroy
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionDestroy$ {
  /** @deprecated use `SessionDestroy$inboundSchema` instead. */
  export const inboundSchema = SessionDestroy$inboundSchema;
  /** @deprecated use `SessionDestroy$outboundSchema` instead. */
  export const outboundSchema = SessionDestroy$outboundSchema;
  /** @deprecated use `SessionDestroy$Outbound` instead. */
  export type Outbound = SessionDestroy$Outbound;
}

export function sessionDestroyToJSON(sessionDestroy: SessionDestroy): string {
  return JSON.stringify(SessionDestroy$outboundSchema.parse(sessionDestroy));
}

export function sessionDestroyFromJSON(
  jsonString: string,
): SafeParseResult<SessionDestroy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionDestroy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionDestroy' from JSON`,
  );
}
