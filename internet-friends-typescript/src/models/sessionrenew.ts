/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SessionRenew = {
  /**
   * New session token
   */
  token: string;
};

/** @internal */
export const SessionRenew$inboundSchema: z.ZodType<
  SessionRenew,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
});

/** @internal */
export type SessionRenew$Outbound = {
  token: string;
};

/** @internal */
export const SessionRenew$outboundSchema: z.ZodType<
  SessionRenew$Outbound,
  z.ZodTypeDef,
  SessionRenew
> = z.object({
  token: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionRenew$ {
  /** @deprecated use `SessionRenew$inboundSchema` instead. */
  export const inboundSchema = SessionRenew$inboundSchema;
  /** @deprecated use `SessionRenew$outboundSchema` instead. */
  export const outboundSchema = SessionRenew$outboundSchema;
  /** @deprecated use `SessionRenew$Outbound` instead. */
  export type Outbound = SessionRenew$Outbound;
}

export function sessionRenewToJSON(sessionRenew: SessionRenew): string {
  return JSON.stringify(SessionRenew$outboundSchema.parse(sessionRenew));
}

export function sessionRenewFromJSON(
  jsonString: string,
): SafeParseResult<SessionRenew, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionRenew$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionRenew' from JSON`,
  );
}
