/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type RegistrationInfo = {
  /**
   * Base64-encoded credential ID
   */
  credentialID: string;
  /**
   * Base64-encoded public key
   */
  credentialPublicKey: string;
  /**
   * Signature counter
   */
  counter: number;
};

export type PasskeyRegistrationSuccess = {
  registrationInfo: RegistrationInfo;
};

/** @internal */
export const RegistrationInfo$inboundSchema: z.ZodType<
  RegistrationInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  credentialID: z.string(),
  credentialPublicKey: z.string(),
  counter: z.number().int(),
});

/** @internal */
export type RegistrationInfo$Outbound = {
  credentialID: string;
  credentialPublicKey: string;
  counter: number;
};

/** @internal */
export const RegistrationInfo$outboundSchema: z.ZodType<
  RegistrationInfo$Outbound,
  z.ZodTypeDef,
  RegistrationInfo
> = z.object({
  credentialID: z.string(),
  credentialPublicKey: z.string(),
  counter: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegistrationInfo$ {
  /** @deprecated use `RegistrationInfo$inboundSchema` instead. */
  export const inboundSchema = RegistrationInfo$inboundSchema;
  /** @deprecated use `RegistrationInfo$outboundSchema` instead. */
  export const outboundSchema = RegistrationInfo$outboundSchema;
  /** @deprecated use `RegistrationInfo$Outbound` instead. */
  export type Outbound = RegistrationInfo$Outbound;
}

export function registrationInfoToJSON(
  registrationInfo: RegistrationInfo,
): string {
  return JSON.stringify(
    RegistrationInfo$outboundSchema.parse(registrationInfo),
  );
}

export function registrationInfoFromJSON(
  jsonString: string,
): SafeParseResult<RegistrationInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegistrationInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegistrationInfo' from JSON`,
  );
}

/** @internal */
export const PasskeyRegistrationSuccess$inboundSchema: z.ZodType<
  PasskeyRegistrationSuccess,
  z.ZodTypeDef,
  unknown
> = z.object({
  registrationInfo: z.lazy(() => RegistrationInfo$inboundSchema),
});

/** @internal */
export type PasskeyRegistrationSuccess$Outbound = {
  registrationInfo: RegistrationInfo$Outbound;
};

/** @internal */
export const PasskeyRegistrationSuccess$outboundSchema: z.ZodType<
  PasskeyRegistrationSuccess$Outbound,
  z.ZodTypeDef,
  PasskeyRegistrationSuccess
> = z.object({
  registrationInfo: z.lazy(() => RegistrationInfo$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PasskeyRegistrationSuccess$ {
  /** @deprecated use `PasskeyRegistrationSuccess$inboundSchema` instead. */
  export const inboundSchema = PasskeyRegistrationSuccess$inboundSchema;
  /** @deprecated use `PasskeyRegistrationSuccess$outboundSchema` instead. */
  export const outboundSchema = PasskeyRegistrationSuccess$outboundSchema;
  /** @deprecated use `PasskeyRegistrationSuccess$Outbound` instead. */
  export type Outbound = PasskeyRegistrationSuccess$Outbound;
}

export function passkeyRegistrationSuccessToJSON(
  passkeyRegistrationSuccess: PasskeyRegistrationSuccess,
): string {
  return JSON.stringify(
    PasskeyRegistrationSuccess$outboundSchema.parse(passkeyRegistrationSuccess),
  );
}

export function passkeyRegistrationSuccessFromJSON(
  jsonString: string,
): SafeParseResult<PasskeyRegistrationSuccess, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PasskeyRegistrationSuccess$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PasskeyRegistrationSuccess' from JSON`,
  );
}
