/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AllowCredential = {
  /**
   * Base64-encoded credential ID
   */
  id?: string | undefined;
  /**
   * Credential type
   */
  type?: string | undefined;
};

export type PasskeyAuthenticationOptions = {
  /**
   * Base64-encoded challenge
   */
  challenge: string;
  /**
   * Timeout in milliseconds
   */
  timeout: number;
  /**
   * Relying party ID
   */
  rpId: string;
  allowCredentials?: Array<AllowCredential> | undefined;
  /**
   * User verification requirement
   */
  userVerification: string;
};

/** @internal */
export const AllowCredential$inboundSchema: z.ZodType<
  AllowCredential,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type AllowCredential$Outbound = {
  id?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const AllowCredential$outboundSchema: z.ZodType<
  AllowCredential$Outbound,
  z.ZodTypeDef,
  AllowCredential
> = z.object({
  id: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllowCredential$ {
  /** @deprecated use `AllowCredential$inboundSchema` instead. */
  export const inboundSchema = AllowCredential$inboundSchema;
  /** @deprecated use `AllowCredential$outboundSchema` instead. */
  export const outboundSchema = AllowCredential$outboundSchema;
  /** @deprecated use `AllowCredential$Outbound` instead. */
  export type Outbound = AllowCredential$Outbound;
}

export function allowCredentialToJSON(
  allowCredential: AllowCredential,
): string {
  return JSON.stringify(AllowCredential$outboundSchema.parse(allowCredential));
}

export function allowCredentialFromJSON(
  jsonString: string,
): SafeParseResult<AllowCredential, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AllowCredential$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AllowCredential' from JSON`,
  );
}

/** @internal */
export const PasskeyAuthenticationOptions$inboundSchema: z.ZodType<
  PasskeyAuthenticationOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  challenge: z.string(),
  timeout: z.number().int(),
  rpId: z.string(),
  allowCredentials: z.array(z.lazy(() => AllowCredential$inboundSchema))
    .optional(),
  userVerification: z.string(),
});

/** @internal */
export type PasskeyAuthenticationOptions$Outbound = {
  challenge: string;
  timeout: number;
  rpId: string;
  allowCredentials?: Array<AllowCredential$Outbound> | undefined;
  userVerification: string;
};

/** @internal */
export const PasskeyAuthenticationOptions$outboundSchema: z.ZodType<
  PasskeyAuthenticationOptions$Outbound,
  z.ZodTypeDef,
  PasskeyAuthenticationOptions
> = z.object({
  challenge: z.string(),
  timeout: z.number().int(),
  rpId: z.string(),
  allowCredentials: z.array(z.lazy(() => AllowCredential$outboundSchema))
    .optional(),
  userVerification: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PasskeyAuthenticationOptions$ {
  /** @deprecated use `PasskeyAuthenticationOptions$inboundSchema` instead. */
  export const inboundSchema = PasskeyAuthenticationOptions$inboundSchema;
  /** @deprecated use `PasskeyAuthenticationOptions$outboundSchema` instead. */
  export const outboundSchema = PasskeyAuthenticationOptions$outboundSchema;
  /** @deprecated use `PasskeyAuthenticationOptions$Outbound` instead. */
  export type Outbound = PasskeyAuthenticationOptions$Outbound;
}

export function passkeyAuthenticationOptionsToJSON(
  passkeyAuthenticationOptions: PasskeyAuthenticationOptions,
): string {
  return JSON.stringify(
    PasskeyAuthenticationOptions$outboundSchema.parse(
      passkeyAuthenticationOptions,
    ),
  );
}

export function passkeyAuthenticationOptionsFromJSON(
  jsonString: string,
): SafeParseResult<PasskeyAuthenticationOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PasskeyAuthenticationOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PasskeyAuthenticationOptions' from JSON`,
  );
}
