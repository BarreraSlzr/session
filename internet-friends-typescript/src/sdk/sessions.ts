/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { sessionsDestroy } from "../funcs/sessionsDestroy.js";
import { sessionsRenew } from "../funcs/sessionsRenew.js";
import { sessionsStatus } from "../funcs/sessionsStatus.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Sessions extends ClientSDK {
  /**
   * Check session status
   *
   * @remarks
   * Validates the current session and returns user information
   */
  async status(
    options?: RequestOptions,
  ): Promise<models.SessionStatus> {
    return unwrapAsync(sessionsStatus(
      this,
      options,
    ));
  }

  /**
   * Renew session
   *
   * @remarks
   * Creates a new session token and extends the session duration
   */
  async renew(
    options?: RequestOptions,
  ): Promise<models.SessionRenew> {
    return unwrapAsync(sessionsRenew(
      this,
      options,
    ));
  }

  /**
   * Destroy session
   *
   * @remarks
   * Invalidates the current session and logs the user out
   */
  async destroy(
    options?: RequestOptions,
  ): Promise<models.SessionDestroy> {
    return unwrapAsync(sessionsDestroy(
      this,
      options,
    ));
  }
}
