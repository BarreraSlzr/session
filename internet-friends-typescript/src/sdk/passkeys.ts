/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { passkeysGetGenerateAuthenticateOptions } from "../funcs/passkeysGetGenerateAuthenticateOptions.js";
import { passkeysGetGenerateRegisterOptions } from "../funcs/passkeysGetGenerateRegisterOptions.js";
import { passkeysVerifyAuthentication } from "../funcs/passkeysVerifyAuthentication.js";
import { passkeysVerifyRegistration } from "../funcs/passkeysVerifyRegistration.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Passkeys extends ClientSDK {
  /**
   * Generate authentication options for passkey login
   *
   * @remarks
   * Generates WebAuthn authentication options for passkey-based login
   */
  async getGenerateAuthenticateOptions(
    options?: RequestOptions,
  ): Promise<models.PasskeyAuthenticationOptions> {
    return unwrapAsync(passkeysGetGenerateAuthenticateOptions(
      this,
      options,
    ));
  }

  /**
   * Generate registration options for passkey
   *
   * @remarks
   * Generates WebAuthn registration options for creating a new passkey
   */
  async getGenerateRegisterOptions(
    options?: RequestOptions,
  ): Promise<models.PasskeyRegistrationOptions> {
    return unwrapAsync(passkeysGetGenerateRegisterOptions(
      this,
      options,
    ));
  }

  /**
   * Verify passkey authentication response
   *
   * @remarks
   * Verifies a WebAuthn authentication response from the client
   */
  async verifyAuthentication(
    request: models.PasskeyVerificationRequest,
    options?: RequestOptions,
  ): Promise<models.PasskeyVerificationSuccess> {
    return unwrapAsync(passkeysVerifyAuthentication(
      this,
      request,
      options,
    ));
  }

  /**
   * Verify passkey registration response
   *
   * @remarks
   * Verifies a WebAuthn registration response from the client
   */
  async verifyRegistration(
    request: models.PasskeyVerificationRequest,
    options?: RequestOptions,
  ): Promise<models.PasskeyRegistrationSuccess> {
    return unwrapAsync(passkeysVerifyRegistration(
      this,
      request,
      options,
    ));
  }
}
